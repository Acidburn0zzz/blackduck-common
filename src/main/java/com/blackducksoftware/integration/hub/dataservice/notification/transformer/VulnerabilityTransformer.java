/**
 * Hub Common
 *
 * Copyright (C) 2017 Black Duck Software, Inc.
 * http://www.blackducksoftware.com/
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package com.blackducksoftware.integration.hub.dataservice.notification.transformer;

import java.util.ArrayList;
import java.util.List;

import com.blackducksoftware.integration.hub.api.item.MetaService;
import com.blackducksoftware.integration.hub.api.notification.NotificationItem;
import com.blackducksoftware.integration.hub.api.notification.NotificationRequestService;
import com.blackducksoftware.integration.hub.api.notification.VulnerabilityNotificationContent;
import com.blackducksoftware.integration.hub.api.notification.VulnerabilityNotificationItem;
import com.blackducksoftware.integration.hub.api.notification.VulnerabilitySourceQualifiedId;
import com.blackducksoftware.integration.hub.api.policy.PolicyRequestService;
import com.blackducksoftware.integration.hub.api.project.AffectedProjectVersion;
import com.blackducksoftware.integration.hub.api.project.version.ProjectVersionItem;
import com.blackducksoftware.integration.hub.api.project.version.ProjectVersionRequestService;
import com.blackducksoftware.integration.hub.api.version.VersionBomPolicyRequestService;
import com.blackducksoftware.integration.hub.dataservice.notification.item.NotificationContentItem;
import com.blackducksoftware.integration.hub.dataservice.notification.item.ProjectVersion;
import com.blackducksoftware.integration.hub.dataservice.notification.item.VulnerabilityContentItem;
import com.blackducksoftware.integration.hub.exception.HubIntegrationException;
import com.blackducksoftware.integration.hub.exception.HubItemTransformException;
import com.blackducksoftware.integration.hub.service.HubRequestService;

public class VulnerabilityTransformer extends AbstractNotificationTransformer {
    private final MetaService metaService;

    public VulnerabilityTransformer(final NotificationRequestService notificationService,
            final ProjectVersionRequestService projectVersionService, final PolicyRequestService policyService,
            final VersionBomPolicyRequestService bomVersionPolicyService,
            final HubRequestService hubRequestService, final MetaService metaService) {
        super(notificationService, projectVersionService, policyService, bomVersionPolicyService,
                hubRequestService);
        this.metaService = metaService;
    }

    @Override
    public List<NotificationContentItem> transform(final NotificationItem item) throws HubItemTransformException {
        final List<NotificationContentItem> notificationContentItems = new ArrayList<>();
        try {
            final VulnerabilityNotificationItem vulnerabilityNotificationItem = (VulnerabilityNotificationItem) item;
            final VulnerabilityNotificationContent vulnerabilityNotificationContent = vulnerabilityNotificationItem
                    .getContent();

            final String componentName = vulnerabilityNotificationContent.getComponentName();
            final String componentVersionName = vulnerabilityNotificationContent.getVersionName();
            final String componentVersionUrl = vulnerabilityNotificationContent.getComponentVersionLink();

            final List<VulnerabilitySourceQualifiedId> addedVulnList = extractIdList(
                    vulnerabilityNotificationContent.getNewVulnerabilityCount(),
                    vulnerabilityNotificationContent.getNewVulnerabilityIds());
            final List<VulnerabilitySourceQualifiedId> updatedVulnList = extractIdList(
                    vulnerabilityNotificationContent.getUpdatedVulnerabilityCount(),
                    vulnerabilityNotificationContent.getUpdatedVulnerabilityIds());
            final List<VulnerabilitySourceQualifiedId> deletedVulnList = extractIdList(
                    vulnerabilityNotificationContent.getDeletedVulnerabilityCount(),
                    vulnerabilityNotificationContent.getDeletedVulnerabilityIds());

            final List<AffectedProjectVersion> affectedProjectVersionList = vulnerabilityNotificationItem.getContent()
                    .getAffectedProjectVersions();
            if (affectedProjectVersionList == null || affectedProjectVersionList.isEmpty()) {
                notificationContentItems
                        .add(new VulnerabilityContentItem(item.getCreatedAt(), new ProjectVersion(),
                                componentName, componentVersionName,
                                componentVersionUrl, addedVulnList,
                                updatedVulnList,
                                deletedVulnList));
            } else {
                for (final AffectedProjectVersion affectedProjectVersion : affectedProjectVersionList) {
                    final ProjectVersion fullProjectVersion = createFullProjectVersion(affectedProjectVersion);
                    notificationContentItems
                            .add(new VulnerabilityContentItem(item.getCreatedAt(), fullProjectVersion,
                                    componentName, componentVersionName,
                                    componentVersionUrl, addedVulnList,
                                    updatedVulnList,
                                    deletedVulnList));
                }
            }
        } catch (final Exception e) {
            throw new HubItemTransformException(e);
        }
        return notificationContentItems;
    }

    private ProjectVersion createFullProjectVersion(final AffectedProjectVersion affectedProjectVersion) throws HubIntegrationException {
        final String url = affectedProjectVersion.getUrl();
        ProjectVersionItem item;
        try {
            item = getHubRequestService().getItem(url, ProjectVersionItem.class);
        } catch (final HubIntegrationException e) {
            final String msg = "Error getting the full ProjectVersion for this affected project version: "
                    + affectedProjectVersion + ": " + e.getMessage();
            throw new HubIntegrationException(msg, e);
        }
        final ProjectVersion fullProjectVersion = new ProjectVersion();
        fullProjectVersion.setProjectName(affectedProjectVersion.getProjectName());
        fullProjectVersion.setProjectVersionName(affectedProjectVersion.getProjectVersionName());
        fullProjectVersion.setDistribution(item.getDistribution());
        fullProjectVersion.setLicense(item.getLicense());
        fullProjectVersion.setNickname(item.getNickname());
        fullProjectVersion.setPhase(item.getPhase());
        fullProjectVersion.setReleaseComments(item.getReleaseComments());
        fullProjectVersion.setReleasedOn(item.getReleasedOn());
        fullProjectVersion.setSource(item.getSource());

        fullProjectVersion.setUrl(metaService.getHref(item));
        fullProjectVersion.setCodeLocationsLink((metaService.getLink(item, MetaService.CODE_LOCATION_LINK)));
        fullProjectVersion.setComponentsLink((metaService.getLink(item, MetaService.COMPONENTS_LINK)));
        fullProjectVersion.setPolicyStatusLink((metaService.getLink(item, MetaService.POLICY_STATUS_LINK)));
        fullProjectVersion.setProjectLink((metaService.getLink(item, MetaService.PROJECT_LINK)));
        fullProjectVersion.setRiskProfileLink((metaService.getLink(item, MetaService.RISK_PROFILE_LINK)));
        fullProjectVersion.setVersionReportLink((metaService.getLink(item, MetaService.VERSION_REPORT_LINK)));
        fullProjectVersion.setVulnerableComponentsLink((metaService.getLink(item, MetaService.VULNERABLE_COMPONENTS_LINK)));

        return fullProjectVersion;
    }

    private List<VulnerabilitySourceQualifiedId> extractIdList(final int count,
            final List<VulnerabilitySourceQualifiedId> idList) {
        if (count > 0 && idList != null && idList.size() > 0) {
            return idList;
        }
        return new ArrayList<>();
    }

}
