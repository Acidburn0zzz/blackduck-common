package com.blackducksoftware.integration.hub.dataservices.transforms;

import java.util.ArrayList;
import java.util.List;

import com.blackducksoftware.integration.hub.api.ComponentVersionRestService;
import com.blackducksoftware.integration.hub.api.NotificationRestService;
import com.blackducksoftware.integration.hub.api.PolicyRestService;
import com.blackducksoftware.integration.hub.api.ProjectVersionRestService;
import com.blackducksoftware.integration.hub.api.VersionBomPolicyRestService;
import com.blackducksoftware.integration.hub.api.notification.NotificationItem;
import com.blackducksoftware.integration.hub.api.notification.VulnerabilityNotificationContent;
import com.blackducksoftware.integration.hub.api.notification.VulnerabilityNotificationItem;
import com.blackducksoftware.integration.hub.api.notification.VulnerabilitySourceQualifiedId;
import com.blackducksoftware.integration.hub.api.project.ProjectVersion;
import com.blackducksoftware.integration.hub.dataservices.items.NotificationContentItem;
import com.blackducksoftware.integration.hub.dataservices.items.VulnerabilityContentItem;
import com.blackducksoftware.integration.hub.exception.HubItemTransformException;

public class VulnerabilityTransform extends AbstractNotificationTransform {
	public VulnerabilityTransform(final NotificationRestService notificationService,
			final ProjectVersionRestService projectVersionService, final PolicyRestService policyService,
			final VersionBomPolicyRestService bomVersionPolicyService,
			final ComponentVersionRestService componentVersionService) {
		super(notificationService, projectVersionService, policyService, bomVersionPolicyService,
				componentVersionService);
	}

	@Override
	public List<NotificationContentItem> transform(final NotificationItem item) throws HubItemTransformException {
		final List<NotificationContentItem> notificationContentItems = new ArrayList<>();
		try {
			final VulnerabilityNotificationItem vulnerabilityNotificationItem = (VulnerabilityNotificationItem) item;
			final VulnerabilityNotificationContent vulnerabilityNotificationContent = vulnerabilityNotificationItem
					.getContent();

			final String componentName = vulnerabilityNotificationItem.getContent().getComponentName();
			final String componentVersionName = vulnerabilityNotificationItem.getContent().getVersionName();
			final List<VulnerabilitySourceQualifiedId> addedVulnList = extractIdList(
					vulnerabilityNotificationContent.getNewVulnerabilityCount(),
					vulnerabilityNotificationContent.getNewVulnerabilityIds());
			final List<VulnerabilitySourceQualifiedId> updatedVulnList = extractIdList(
					vulnerabilityNotificationContent.getUpdatedVulnerabilityCount(),
					vulnerabilityNotificationContent.getUpdatedVulnerabilityIds());
			final List<VulnerabilitySourceQualifiedId> deletedVulnList = extractIdList(
					vulnerabilityNotificationContent.getDeletedVulnerabilityCount(),
					vulnerabilityNotificationContent.getDeletedVulnerabilityIds());

			String projectName = "";
			String projectVersionName = "";
			final List<ProjectVersion> projectVersionList = vulnerabilityNotificationItem.getContent()
					.getAffectedProjectVersions();
			if (null == projectVersionList || projectVersionList.isEmpty()) {
				notificationContentItems.add(new VulnerabilityContentItem(projectName, projectVersionName,
						componentName, componentVersionName, addedVulnList, updatedVulnList, deletedVulnList));
			} else {
				for (final ProjectVersion projectVersion : projectVersionList) {
					projectName = projectVersion.getProjectName();
					projectVersionName = projectVersion.getProjectVersionName();
					notificationContentItems.add(new VulnerabilityContentItem(projectName, projectVersionName,
							componentName, componentVersionName, addedVulnList, updatedVulnList, deletedVulnList));
				}
			}
		} catch (final Exception e) {
			throw new HubItemTransformException(e);
		}
		return notificationContentItems;
	}

	private List<VulnerabilitySourceQualifiedId> extractIdList(final int count,
			final List<VulnerabilitySourceQualifiedId> idList) {
		if (count > 0 && null != idList && idList.size() > 0) {
			return idList;
		}
		return new ArrayList<>();
	}

	@Override
	public void reset() {
	}
}
