package com.blackducksoftware.integration.hub.dataservices.transforms;

import java.util.ArrayList;
import java.util.List;

import com.blackducksoftware.integration.hub.api.ComponentVersionRestService;
import com.blackducksoftware.integration.hub.api.NotificationRestService;
import com.blackducksoftware.integration.hub.api.PolicyRestService;
import com.blackducksoftware.integration.hub.api.ProjectVersionRestService;
import com.blackducksoftware.integration.hub.api.VersionBomPolicyRestService;
import com.blackducksoftware.integration.hub.api.notification.NotificationItem;
import com.blackducksoftware.integration.hub.api.notification.VulnerabilityNotificationContent;
import com.blackducksoftware.integration.hub.api.notification.VulnerabilityNotificationItem;
import com.blackducksoftware.integration.hub.api.notification.VulnerabilitySourceQualifiedId;
import com.blackducksoftware.integration.hub.api.project.ProjectVersion;
import com.blackducksoftware.integration.hub.dataservices.items.NotificationContentItem;
import com.blackducksoftware.integration.hub.dataservices.items.VulnerabilityContentItem;
import com.blackducksoftware.integration.hub.exception.HubItemTransformException;

public class VulnerabilityTransform extends AbstractNotificationTransform {

	public VulnerabilityTransform(final NotificationRestService notificationService,
			final ProjectVersionRestService projectVersionService, final PolicyRestService policyService,
			final VersionBomPolicyRestService bomVersionPolicyService,
			final ComponentVersionRestService componentVersionService) {
		super(notificationService, projectVersionService, policyService, bomVersionPolicyService,
				componentVersionService);
	}

	@Override
	public List<NotificationContentItem> transform(final NotificationItem item) throws HubItemTransformException {
		final List<NotificationContentItem> templateData = new ArrayList<NotificationContentItem>();
		try {
			final VulnerabilityNotificationItem vulnerability = (VulnerabilityNotificationItem) item;
			final VulnerabilityNotificationContent vulnContent = vulnerability.getContent();

			final String componentName = vulnerability.getContent().getComponentName();
			final String componentVersionName = vulnerability.getContent().getVersionName();
			String projectName;
			String projectVersionName;
			final List<ProjectVersion> projectVersionList = vulnerability.getContent().getAffectedProjectVersions();
			for (final ProjectVersion projectVersion : projectVersionList) {
				projectName = projectVersion.getProjectName();
				projectVersionName = projectVersion.getProjectVersionName();
				List<VulnerabilitySourceQualifiedId> addedVulnList = new ArrayList<VulnerabilitySourceQualifiedId>();
				List<VulnerabilitySourceQualifiedId> updatedVulnList = new ArrayList<VulnerabilitySourceQualifiedId>();
				List<VulnerabilitySourceQualifiedId> deletedVulnList = new ArrayList<VulnerabilitySourceQualifiedId>();

				if (vulnContent.getNewVulnerabilityCount() > 0) {
					addedVulnList = vulnContent.getNewVulnerabilityIds();
				}
				if (vulnContent.getUpdatedVulnerabilityCount() > 0) {
					updatedVulnList = vulnContent.getUpdatedVulnerabilityIds();
				}
				if (vulnContent.getDeletedVulnerabilityCount() > 0) {
					deletedVulnList = vulnContent.getDeletedVulnerabilityIds();
				}
				templateData.add(new VulnerabilityContentItem(projectName, projectVersionName, componentName,
						componentVersionName, addedVulnList, updatedVulnList, deletedVulnList));
			}
		} catch (final Exception e) {
			throw new HubItemTransformException(e);
		}
		return templateData;
	}
}
