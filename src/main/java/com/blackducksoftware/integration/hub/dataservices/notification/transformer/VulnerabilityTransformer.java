/*******************************************************************************
 * Copyright (C) 2016 Black Duck Software, Inc.
 * http://www.blackducksoftware.com/
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *******************************************************************************/
package com.blackducksoftware.integration.hub.dataservices.notification.transformer;

import java.util.ArrayList;
import java.util.List;

import com.blackducksoftware.integration.hub.api.component.ComponentVersionRestService;
import com.blackducksoftware.integration.hub.api.notification.NotificationItem;
import com.blackducksoftware.integration.hub.api.notification.NotificationRestService;
import com.blackducksoftware.integration.hub.api.notification.VulnerabilityNotificationContent;
import com.blackducksoftware.integration.hub.api.notification.VulnerabilityNotificationItem;
import com.blackducksoftware.integration.hub.api.notification.VulnerabilitySourceQualifiedId;
import com.blackducksoftware.integration.hub.api.policy.PolicyRestService;
import com.blackducksoftware.integration.hub.api.project.ProjectVersion;
import com.blackducksoftware.integration.hub.api.project.ProjectVersionRestService;
import com.blackducksoftware.integration.hub.api.version.VersionBomPolicyRestService;
import com.blackducksoftware.integration.hub.dataservices.notification.items.NotificationContentItem;
import com.blackducksoftware.integration.hub.dataservices.notification.items.VulnerabilityContentItem;
import com.blackducksoftware.integration.hub.exception.HubItemTransformException;

public class VulnerabilityTransformer extends AbstractNotificationTransformer {
	public VulnerabilityTransformer(final NotificationRestService notificationService,
			final ProjectVersionRestService projectVersionService, final PolicyRestService policyService,
			final VersionBomPolicyRestService bomVersionPolicyService,
			final ComponentVersionRestService componentVersionService) {
		super(notificationService, projectVersionService, policyService, bomVersionPolicyService,
				componentVersionService);
	}

	@Override
	public List<NotificationContentItem> transform(final NotificationItem item) throws HubItemTransformException {
		final List<NotificationContentItem> notificationContentItems = new ArrayList<>();
		try {
			final VulnerabilityNotificationItem vulnerabilityNotificationItem = (VulnerabilityNotificationItem) item;
			final VulnerabilityNotificationContent vulnerabilityNotificationContent = vulnerabilityNotificationItem
					.getContent();

			final String componentName = vulnerabilityNotificationContent.getComponentName();
			final String componentVersionName = vulnerabilityNotificationContent.getVersionName();
			final String componentVersionUrl = vulnerabilityNotificationContent.getComponentVersionLink();

			final List<VulnerabilitySourceQualifiedId> addedVulnList = extractIdList(
					vulnerabilityNotificationContent.getNewVulnerabilityCount(),
					vulnerabilityNotificationContent.getNewVulnerabilityIds());
			final List<VulnerabilitySourceQualifiedId> updatedVulnList = extractIdList(
					vulnerabilityNotificationContent.getUpdatedVulnerabilityCount(),
					vulnerabilityNotificationContent.getUpdatedVulnerabilityIds());
			final List<VulnerabilitySourceQualifiedId> deletedVulnList = extractIdList(
					vulnerabilityNotificationContent.getDeletedVulnerabilityCount(),
					vulnerabilityNotificationContent.getDeletedVulnerabilityIds());

			final List<ProjectVersion> projectVersionList = vulnerabilityNotificationItem.getContent()
					.getAffectedProjectVersions();
			if (projectVersionList == null || projectVersionList.isEmpty()) {
				notificationContentItems
				.add(new VulnerabilityContentItem(item.getCreatedAt(), new ProjectVersion(),
						componentName, componentVersionName,
						componentVersionUrl, addedVulnList,
						updatedVulnList,
						deletedVulnList));
			} else {
				for (final ProjectVersion projectVersion : projectVersionList) {
					notificationContentItems
					.add(new VulnerabilityContentItem(item.getCreatedAt(), projectVersion,
							componentName, componentVersionName,
							componentVersionUrl, addedVulnList,
							updatedVulnList,
							deletedVulnList));
				}
			}
		} catch (final Exception e) {
			throw new HubItemTransformException(e);
		}
		return notificationContentItems;
	}

	private List<VulnerabilitySourceQualifiedId> extractIdList(final int count,
			final List<VulnerabilitySourceQualifiedId> idList) {
		if (count > 0 && idList != null && idList.size() > 0) {
			return idList;
		}
		return new ArrayList<>();
	}

}
