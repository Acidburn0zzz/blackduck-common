/**
 * Hub Common
 *
 * Copyright (C) 2017 Black Duck Software, Inc.
 * http://www.blackducksoftware.com/
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package com.blackducksoftware.integration.hub.notification.transformer;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.junit.Test;
import org.mockito.Mockito;

import com.blackducksoftware.integration.exception.IntegrationException;
import com.blackducksoftware.integration.hub.api.generated.view.ComponentVersionView;
import com.blackducksoftware.integration.hub.api.generated.view.ProjectVersionView;
import com.blackducksoftware.integration.hub.api.notification.NotificationService;
import com.blackducksoftware.integration.hub.api.policy.PolicyService;
import com.blackducksoftware.integration.hub.api.project.version.ProjectVersionService;
import com.blackducksoftware.integration.hub.api.response.AffectedProjectVersion;
import com.blackducksoftware.integration.hub.api.response.VulnerabilityNotificationContent;
import com.blackducksoftware.integration.hub.api.view.MetaHandler;
import com.blackducksoftware.integration.hub.api.view.VulnerabilityNotificationView;
import com.blackducksoftware.integration.hub.dataservice.notification.model.NotificationContentItem;
import com.blackducksoftware.integration.hub.dataservice.notification.transformer.VulnerabilityTransformer;
import com.blackducksoftware.integration.hub.exception.HubIntegrationException;
import com.blackducksoftware.integration.hub.service.HubService;
import com.blackducksoftware.integration.log.IntLogger;
import com.blackducksoftware.integration.test.TestLogger;

public class VulnerabilityNotificationTransformerTest {
    private static final String PROJECT_VERSION_URL = "http://my.hub.com/projects/x/versions/y";

    @Test
    public void testForbiddenProject() throws IntegrationException {
        final IOException forbiddenException = new IOException("Forbidden");
        final List<NotificationContentItem> items = testException(forbiddenException);
        // Forbidden projectVersions should be quietly ignored (no exception thrown)
        assertEquals(0, items.size());
    }

    @Test
    public void testFatalError() throws IntegrationException {
        final IOException fatalException = new IOException("No data could be found.");
        try {
            testException(fatalException);
            fail("Expected exception");
        } catch (final HubIntegrationException e) {
            // expected
        }
    }

    private List<NotificationContentItem> testException(final Exception exceptionThrownByGet) throws IntegrationException {
        final NotificationService notificationService = Mockito.mock(NotificationService.class);
        final ProjectVersionService projectVersionService = Mockito.mock(ProjectVersionService.class);
        final PolicyService policyService = Mockito.mock(PolicyService.class);
        final HubService hubResponseService = Mockito.mock(HubService.class);
        final MetaHandler metaService = Mockito.mock(MetaHandler.class);
        final IntLogger logger = new TestLogger();

        final HubIntegrationException wrappedForbiddenException = new HubIntegrationException(
                "There was a problem getting this item : " + PROJECT_VERSION_URL + ". Error : " + exceptionThrownByGet.getMessage(), exceptionThrownByGet);
        Mockito.when(hubResponseService.getResponse(PROJECT_VERSION_URL, ProjectVersionView.class)).thenThrow(wrappedForbiddenException);

        final VulnerabilityTransformer vulnerabilityTransformer = new VulnerabilityTransformer(hubResponseService, notificationService,
                projectVersionService, policyService, metaService, logger);

        final AffectedProjectVersion affectedProjectVersion = new AffectedProjectVersion();
        affectedProjectVersion.projectName = "testProjectName";
        affectedProjectVersion.projectVersionName = "testProjectVersionName";
        affectedProjectVersion.projectVersion = PROJECT_VERSION_URL;

        final List<AffectedProjectVersion> affectedProjectVersions = new ArrayList<>();
        affectedProjectVersions.add(affectedProjectVersion);

        final VulnerabilityNotificationContent vulnerabilityNotificationContent = new VulnerabilityNotificationContent();
        vulnerabilityNotificationContent.componentName = "testComponent";
        vulnerabilityNotificationContent.componentVersionLink = "http://my.hub.com/api/components/x/versions/y";
        vulnerabilityNotificationContent.affectedProjectVersions = affectedProjectVersions;

        final ComponentVersionView componentVersion = new ComponentVersionView();
        Mockito.when(hubResponseService.getResponse(Mockito.any(String.class), Mockito.eq(ComponentVersionView.class))).thenReturn(componentVersion);

        final VulnerabilityNotificationView item = new VulnerabilityNotificationView();
        item.content = vulnerabilityNotificationContent;

        final List<NotificationContentItem> items = vulnerabilityTransformer.transform(item);
        return items;
    }

}
