package com.blackducksoftware.integration.hub.dataservices.items;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

import org.junit.Test;
import org.mockito.Mockito;

import com.blackducksoftware.integration.hub.api.notification.VulnerabilityNotificationContent;
import com.blackducksoftware.integration.hub.api.notification.VulnerabilityNotificationItem;
import com.blackducksoftware.integration.hub.dataservices.notifications.items.VulnerabilityItemCount;

public class VulnerabilityItemCountTest {

	private VulnerabilityNotificationItem createVulnerability() {
		final VulnerabilityNotificationItem item = Mockito.mock(VulnerabilityNotificationItem.class);
		final VulnerabilityNotificationContent content = Mockito.mock(VulnerabilityNotificationContent.class);
		Mockito.when(item.getContent()).thenReturn(content);
		Mockito.when(content.getNewVulnerabilityCount()).thenReturn(1);
		Mockito.when(content.getUpdatedVulnerabilityCount()).thenReturn(1);
		Mockito.when(content.getDeletedVulnerabilityCount()).thenReturn(1);

		return item;
	}

	@Test
	public void testConstructor() {
		assertNotNull(new VulnerabilityItemCount());
	}

	@Test
	public void testIncrement() {

		final VulnerabilityNotificationItem item = createVulnerability();
		final VulnerabilityItemCount counter = new VulnerabilityItemCount();
		final int count = 5;
		for (int index = 0; index < count; index++) {
			counter.increment(item);
		}

		assertEquals(count, counter.getCount());
		assertEquals(count, counter.getAddedCount());
		assertEquals(count, counter.getUpdatedCount());
		assertEquals(count, counter.getDeletedCount());
	}

	@Test
	public void testReset() {
		final VulnerabilityNotificationItem item = createVulnerability();
		final VulnerabilityItemCount counter = new VulnerabilityItemCount();
		final int count = 5;
		for (int index = 0; index < count; index++) {
			counter.increment(item);
		}

		assertEquals(count, counter.getCount());
		counter.reset();
		assertEquals(0, counter.getCount());
		assertEquals(0, counter.getAddedCount());
		assertEquals(0, counter.getUpdatedCount());
		assertEquals(0, counter.getDeletedCount());
	}
}
