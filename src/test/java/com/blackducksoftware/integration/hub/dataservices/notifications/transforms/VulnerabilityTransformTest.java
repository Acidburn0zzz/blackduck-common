/*******************************************************************************
 * Copyright (C) 2016 Black Duck Software, Inc.
 * http://www.blackducksoftware.com/
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *******************************************************************************/
package com.blackducksoftware.integration.hub.dataservices.notifications.transforms;

import static org.junit.Assert.assertEquals;

import java.io.IOException;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import com.blackducksoftware.integration.hub.api.component.version.BomComponentVersionPolicyStatus;
import com.blackducksoftware.integration.hub.api.component.version.ComponentVersion;
import com.blackducksoftware.integration.hub.api.component.version.ComponentVersionRestService;
import com.blackducksoftware.integration.hub.api.notification.NotificationRestService;
import com.blackducksoftware.integration.hub.api.notification.VulnerabilityNotificationContent;
import com.blackducksoftware.integration.hub.api.notification.VulnerabilityNotificationItem;
import com.blackducksoftware.integration.hub.api.notification.VulnerabilitySourceQualifiedId;
import com.blackducksoftware.integration.hub.api.policy.PolicyRestService;
import com.blackducksoftware.integration.hub.api.project.ProjectVersion;
import com.blackducksoftware.integration.hub.api.project.ReleaseItemRestService;
import com.blackducksoftware.integration.hub.api.version.ReleaseItem;
import com.blackducksoftware.integration.hub.api.version.VersionBomPolicyRestService;
import com.blackducksoftware.integration.hub.dataservices.notification.items.NotificationContentItem;
import com.blackducksoftware.integration.hub.dataservices.notification.items.VulnerabilityContentItem;
import com.blackducksoftware.integration.hub.dataservices.notification.transformer.VulnerabilityTransformer;
import com.blackducksoftware.integration.hub.exception.BDRestException;
import com.blackducksoftware.integration.hub.exception.NotificationServiceException;

public class VulnerabilityTransformTest {

    private final static String PROJECT_NAME = "test project";

    private final static String PROJECT_VERSION = "0.1.0";

    private final static String COMPONENT_NAME = "component 1";

    private final static String COMPONENT_VERSION = "0.9.8";

    private final static String COMPONENT_VERSION_URL = "http://hub.blackducksoftware.com/api/projects/"
            + UUID.randomUUID() + "/versions/" + UUID.randomUUID() + "/";

    private NotificationRestService notificationService;

    private ReleaseItemRestService projectVersionService;

    private PolicyRestService policyService;

    private VersionBomPolicyRestService bomVersionPolicyService;

    private ComponentVersionRestService componentVersionService;

    private VulnerabilityTransformer transformer;

    private List<VulnerabilitySourceQualifiedId> vulnList;

    private NotificationRestService createNotificationService() {
        final NotificationRestService service = Mockito.mock(NotificationRestService.class);
        return service;
    }

    private ReleaseItemRestService createProjectVersionService()
            throws IOException, BDRestException, URISyntaxException {

        final ReleaseItemRestService service = Mockito.mock(ReleaseItemRestService.class);
        final ReleaseItem releaseItem = Mockito.mock(ReleaseItem.class);
        Mockito.when(releaseItem.getVersionName()).thenReturn(PROJECT_VERSION);
        Mockito.when(service.getItem(Mockito.anyString())).thenReturn(releaseItem);
        return service;
    }

    private PolicyRestService createPolicyService() throws IOException, BDRestException, URISyntaxException {
        final PolicyRestService service = Mockito.mock(PolicyRestService.class);
        return service;
    }

    private VersionBomPolicyRestService createBomVersionService()
            throws IOException, BDRestException, URISyntaxException {
        final List<String> policyRuleList = new ArrayList<>();
        policyRuleList.add("url1");
        final BomComponentVersionPolicyStatus status = Mockito.mock(BomComponentVersionPolicyStatus.class);
        Mockito.when(status.getLinks(Mockito.anyString())).thenReturn(policyRuleList);
        final VersionBomPolicyRestService service = Mockito.mock(VersionBomPolicyRestService.class);
        Mockito.when(service.getItem(Mockito.anyString())).thenReturn(status);
        return service;
    }

    private ComponentVersionRestService createComponentVersionService()
            throws NotificationServiceException, IOException, BDRestException, URISyntaxException {

        final ComponentVersion componentVersion = Mockito.mock(ComponentVersion.class);
        Mockito.when(componentVersion.getVersionName()).thenReturn(COMPONENT_VERSION);
        final ComponentVersionRestService service = Mockito.mock(ComponentVersionRestService.class);
        Mockito.when(service.getItem(Mockito.anyString())).thenReturn(componentVersion);
        return service;
    }

    @Before
    public void initTest() throws Exception {
        notificationService = createNotificationService();
        projectVersionService = createProjectVersionService();
        policyService = createPolicyService();
        bomVersionPolicyService = createBomVersionService();
        componentVersionService = createComponentVersionService();
        vulnList = createVulnList();
        transformer = new VulnerabilityTransformer(notificationService, projectVersionService, policyService,
                bomVersionPolicyService, componentVersionService);

    }

    private VulnerabilityNotificationItem createNotificationItem() {
        final VulnerabilityNotificationItem item = Mockito.mock(VulnerabilityNotificationItem.class);
        final VulnerabilityNotificationContent content = Mockito.mock(VulnerabilityNotificationContent.class);
        Mockito.when(item.getContent()).thenReturn(content);
        Mockito.when(content.getComponentName()).thenReturn(COMPONENT_NAME);
        Mockito.when(content.getVersionName()).thenReturn(COMPONENT_VERSION);
        Mockito.when(content.getComponentVersionLink())
                .thenReturn(COMPONENT_VERSION_URL);

        final ProjectVersion projectVersion = Mockito.mock(ProjectVersion.class);
        Mockito.when(projectVersion.getProjectName()).thenReturn(PROJECT_NAME);
        Mockito.when(projectVersion.getProjectVersionName()).thenReturn(PROJECT_VERSION);
        final List<ProjectVersion> projectVersionList = new ArrayList<>();
        projectVersionList.add(projectVersion);
        Mockito.when(content.getAffectedProjectVersions()).thenReturn(projectVersionList);
        Mockito.when(content.getNewVulnerabilityCount()).thenReturn(1);
        Mockito.when(content.getUpdatedVulnerabilityCount()).thenReturn(1);
        Mockito.when(content.getDeletedVulnerabilityCount()).thenReturn(1);
        Mockito.when(content.getNewVulnerabilityIds()).thenReturn(vulnList);
        Mockito.when(content.getUpdatedVulnerabilityIds()).thenReturn(vulnList);
        Mockito.when(content.getDeletedVulnerabilityIds()).thenReturn(vulnList);
        return item;
    }

    public List<VulnerabilitySourceQualifiedId> createVulnList() {
        final List<VulnerabilitySourceQualifiedId> list = new ArrayList<>();
        final VulnerabilitySourceQualifiedId item = new VulnerabilitySourceQualifiedId("VulnSource", "vulnID");
        list.add(item);
        return list;
    }

    @Test
    public void testTransform() throws Exception {
        final List<NotificationContentItem> itemList = transformer.transform(createNotificationItem());
        for (final NotificationContentItem item : itemList) {
            final VulnerabilityContentItem contentItem = (VulnerabilityContentItem) item;
            assertEquals(PROJECT_NAME, contentItem.getProjectVersion().getProjectName());
            assertEquals(PROJECT_VERSION, contentItem.getProjectVersion().getProjectVersionName());
            assertEquals(COMPONENT_NAME, contentItem.getComponentName());
            assertEquals(COMPONENT_VERSION, contentItem.getComponentVersion());
            assertEquals(COMPONENT_VERSION_URL, contentItem.getComponentVersionUrl());
            assertEquals(vulnList, contentItem.getAddedVulnList());
            assertEquals(vulnList, contentItem.getUpdatedVulnList());
            assertEquals(vulnList, contentItem.getDeletedVulnList());
        }
    }
}
