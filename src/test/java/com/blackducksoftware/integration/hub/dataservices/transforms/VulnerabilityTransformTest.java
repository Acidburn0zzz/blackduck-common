package com.blackducksoftware.integration.hub.dataservices.transforms;

import static org.junit.Assert.assertEquals;

import java.io.IOException;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import com.blackducksoftware.integration.hub.api.ComponentVersionRestService;
import com.blackducksoftware.integration.hub.api.NotificationRestService;
import com.blackducksoftware.integration.hub.api.PolicyRestService;
import com.blackducksoftware.integration.hub.api.ProjectVersionRestService;
import com.blackducksoftware.integration.hub.api.VersionBomPolicyRestService;
import com.blackducksoftware.integration.hub.api.component.BomComponentVersionPolicyStatus;
import com.blackducksoftware.integration.hub.api.component.ComponentVersion;
import com.blackducksoftware.integration.hub.api.component.ComponentVersionStatus;
import com.blackducksoftware.integration.hub.api.notification.VulnerabilityNotificationContent;
import com.blackducksoftware.integration.hub.api.notification.VulnerabilityNotificationItem;
import com.blackducksoftware.integration.hub.api.notification.VulnerabilitySourceQualifiedId;
import com.blackducksoftware.integration.hub.api.project.ProjectVersion;
import com.blackducksoftware.integration.hub.api.version.ReleaseItem;
import com.blackducksoftware.integration.hub.dataservices.items.NotificationContentItem;
import com.blackducksoftware.integration.hub.dataservices.items.VulnerabilityContentItem;
import com.blackducksoftware.integration.hub.exception.BDRestException;
import com.blackducksoftware.integration.hub.exception.NotificationServiceException;

public class VulnerabilityTransformTest {

	private final static String PROJECT_NAME = "test project";
	private final static String PROJECT_VERSION = "0.1.0";
	private final static String COMPONENT_NAME = "component 1";
	private final static String COMPONENT_VERSION = "0.9.8";
	private final static UUID COMPONENT_ID = UUID.randomUUID();
	private final static UUID COMPONENT_VERSION_ID = UUID.randomUUID();

	private NotificationRestService notificationService;
	private ProjectVersionRestService projectVersionService;
	private PolicyRestService policyService;
	private VersionBomPolicyRestService bomVersionPolicyService;
	private ComponentVersionRestService componentVersionService;
	private VulnerabilityTransform transformer;
	private List<VulnerabilitySourceQualifiedId> vulnList;

	private NotificationRestService createNotificationService() {
		final NotificationRestService service = Mockito.mock(NotificationRestService.class);
		return service;
	}

	private ProjectVersionRestService createProjectVersionService()
			throws IOException, BDRestException, URISyntaxException {

		final ProjectVersionRestService service = Mockito.mock(ProjectVersionRestService.class);
		final ReleaseItem releaseItem = Mockito.mock(ReleaseItem.class);
		Mockito.when(releaseItem.getVersionName()).thenReturn(PROJECT_VERSION);
		Mockito.when(service.getProjectVersionReleaseItem(Mockito.anyString())).thenReturn(releaseItem);
		return service;
	}

	private PolicyRestService createPolicyService() throws IOException, BDRestException, URISyntaxException {
		final PolicyRestService service = Mockito.mock(PolicyRestService.class);
		return service;
	}

	private VersionBomPolicyRestService createBomVersionService()
			throws IOException, BDRestException, URISyntaxException {
		final List<String> policyRuleList = new ArrayList<>();
		policyRuleList.add("url1");
		final BomComponentVersionPolicyStatus status = Mockito.mock(BomComponentVersionPolicyStatus.class);
		Mockito.when(status.getLinks(Mockito.anyString())).thenReturn(policyRuleList);
		final VersionBomPolicyRestService service = Mockito.mock(VersionBomPolicyRestService.class);
		Mockito.when(service.getPolicyStatus(Mockito.anyString())).thenReturn(status);
		return service;
	}

	private ComponentVersionRestService createComponentVersionService()
			throws NotificationServiceException, IOException, BDRestException, URISyntaxException {

		final ComponentVersion componentVersion = Mockito.mock(ComponentVersion.class);
		Mockito.when(componentVersion.getVersionName()).thenReturn(COMPONENT_VERSION);
		final ComponentVersionRestService service = Mockito.mock(ComponentVersionRestService.class);
		Mockito.when(service.getComponentVersion(Mockito.anyString())).thenReturn(componentVersion);
		return service;
	}

	@Before
	public void initTest() throws Exception {
		notificationService = createNotificationService();
		projectVersionService = createProjectVersionService();
		policyService = createPolicyService();
		bomVersionPolicyService = createBomVersionService();
		componentVersionService = createComponentVersionService();
		vulnList = createVulnList();
		transformer = new VulnerabilityTransform(notificationService, projectVersionService, policyService,
				bomVersionPolicyService, componentVersionService);

	}

	private VulnerabilityNotificationItem createNotificationItem() {
		final VulnerabilityNotificationItem item = Mockito.mock(VulnerabilityNotificationItem.class);
		final VulnerabilityNotificationContent content = Mockito.mock(VulnerabilityNotificationContent.class);
		Mockito.when(item.getContent()).thenReturn(content);
		Mockito.when(content.getComponentName()).thenReturn(COMPONENT_NAME);
		Mockito.when(content.getVersionName()).thenReturn(COMPONENT_VERSION);
		Mockito.when(content.getComponentVersionLink())
		.thenReturn("/" + ComponentVersionStatus.COMPONENT_URL_IDENTIFIER + "/" + COMPONENT_ID + "/"
				+ ComponentVersionStatus.COMPONENT_VERSION_URL_IDENTIFIER + "/" + COMPONENT_VERSION_ID);

		final ProjectVersion projectVersion = Mockito.mock(ProjectVersion.class);
		Mockito.when(projectVersion.getProjectName()).thenReturn(PROJECT_NAME);
		Mockito.when(projectVersion.getProjectVersionName()).thenReturn(PROJECT_VERSION);
		final List<ProjectVersion> projectVersionList = new ArrayList<>();
		projectVersionList.add(projectVersion);
		Mockito.when(content.getAffectedProjectVersions()).thenReturn(projectVersionList);
		Mockito.when(content.getNewVulnerabilityCount()).thenReturn(1);
		Mockito.when(content.getUpdatedVulnerabilityCount()).thenReturn(1);
		Mockito.when(content.getDeletedVulnerabilityCount()).thenReturn(1);
		Mockito.when(content.getNewVulnerabilityIds()).thenReturn(vulnList);
		Mockito.when(content.getUpdatedVulnerabilityIds()).thenReturn(vulnList);
		Mockito.when(content.getDeletedVulnerabilityIds()).thenReturn(vulnList);
		return item;
	}

	public List<VulnerabilitySourceQualifiedId> createVulnList() {
		final List<VulnerabilitySourceQualifiedId> list = new ArrayList<>();
		final VulnerabilitySourceQualifiedId item = new VulnerabilitySourceQualifiedId("VulnSource", "vulnID");
		list.add(item);
		return list;
	}

	@Test
	public void testTransform() throws Exception {
		final List<NotificationContentItem> itemList = transformer.transform(createNotificationItem());
		for (final NotificationContentItem item : itemList) {
			final VulnerabilityContentItem contentItem = (VulnerabilityContentItem) item;
			assertEquals(PROJECT_NAME, contentItem.getProjectVersion().getProjectName());
			assertEquals(PROJECT_VERSION, contentItem.getProjectVersion().getProjectVersionName());
			assertEquals(COMPONENT_NAME, contentItem.getComponentName());
			assertEquals(COMPONENT_VERSION, contentItem.getComponentVersion());
			assertEquals(COMPONENT_ID, contentItem.getComponentId());
			assertEquals(COMPONENT_VERSION_ID, contentItem.getComponentVersionId());
			assertEquals(vulnList, contentItem.getAddedVulnList());
			assertEquals(vulnList, contentItem.getUpdatedVulnList());
			assertEquals(vulnList, contentItem.getDeletedVulnList());
		}
	}
}
