/**
 * Hub Common
 *
 * Copyright (C) 2017 Black Duck Software, Inc.
 * http://www.blackducksoftware.com/
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package com.blackducksoftware.integration.hub.notification.transformer;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import com.blackducksoftware.integration.hub.api.component.version.ComponentVersion;
import com.blackducksoftware.integration.hub.api.item.MetaService;
import com.blackducksoftware.integration.hub.api.notification.NotificationRequestService;
import com.blackducksoftware.integration.hub.api.notification.VulnerabilityNotificationContent;
import com.blackducksoftware.integration.hub.api.notification.VulnerabilityNotificationItem;
import com.blackducksoftware.integration.hub.api.policy.PolicyRequestService;
import com.blackducksoftware.integration.hub.api.project.AffectedProjectVersion;
import com.blackducksoftware.integration.hub.api.project.version.ProjectVersionItem;
import com.blackducksoftware.integration.hub.api.project.version.ProjectVersionRequestService;
import com.blackducksoftware.integration.hub.api.version.VersionBomPolicyRequestService;
import com.blackducksoftware.integration.hub.dataservice.notification.model.NotificationContentItem;
import com.blackducksoftware.integration.hub.dataservice.notification.transformer.VulnerabilityTransformer;
import com.blackducksoftware.integration.hub.exception.HubIntegrationException;
import com.blackducksoftware.integration.hub.exception.HubItemTransformException;
import com.blackducksoftware.integration.hub.notification.processor.EventTestUtil;
import com.blackducksoftware.integration.hub.notification.processor.MockRestConnection;
import com.blackducksoftware.integration.hub.rest.RestConnection;
import com.blackducksoftware.integration.hub.service.HubRequestService;
import com.blackducksoftware.integration.hub.service.HubServicesFactory;
import com.blackducksoftware.integration.log.IntBufferedLogger;
import com.blackducksoftware.integration.log.IntLogger;
import com.blackducksoftware.integration.test.TestLogger;

public class VulnerabilityNotificationTransformerTest {
    private static final String PROJECT_VERSION_URL = "http://my.hub.com/projects/x/versions/y";

    private final EventTestUtil testUtil = new EventTestUtil();

    private MetaService metaService;

    @Before
    public void init() throws Exception {
        final RestConnection restConnection = new MockRestConnection();
        final HubServicesFactory factory = new HubServicesFactory(restConnection);
        final IntLogger logger = new IntBufferedLogger();
        metaService = factory.createMetaService(logger);
    }

    @Test
    public void testForbiddenProject() throws HubIntegrationException {
        final IOException forbiddenException = new IOException("Forbidden");
        final List<NotificationContentItem> items = testException(forbiddenException);
        // Forbidden projectVersions should be quietly ignored (no exception thrown)
        assertEquals(0, items.size());
    }

    @Test
    public void testFatalError() throws HubIntegrationException {
        final IOException fatalException = new IOException("No data could be found.");
        try {
            testException(fatalException);
            fail("Expected exception");
        } catch (final HubIntegrationException e) {
            // expected
        }

    }

    private List<NotificationContentItem> testException(final Exception exceptionThrownByGet) throws HubIntegrationException, HubItemTransformException {
        final NotificationRequestService notificationService = Mockito.mock(NotificationRequestService.class);
        final ProjectVersionRequestService projectVersionService = Mockito.mock(ProjectVersionRequestService.class);
        final PolicyRequestService policyService = Mockito.mock(PolicyRequestService.class);
        final VersionBomPolicyRequestService bomVersionPolicyService = Mockito.mock(VersionBomPolicyRequestService.class);
        final HubRequestService hubRequestService = Mockito.mock(HubRequestService.class);
        final MetaService metaService = Mockito.mock(MetaService.class);
        final IntLogger logger = new TestLogger();

        final HubIntegrationException wrappedForbiddenException = new HubIntegrationException(
                "There was a problem getting this item : " + PROJECT_VERSION_URL + ". Error : " + exceptionThrownByGet.getMessage(), exceptionThrownByGet);
        Mockito.when(hubRequestService.getItem(PROJECT_VERSION_URL, ProjectVersionItem.class)).thenThrow(wrappedForbiddenException);

        final VulnerabilityTransformer vulnerabilityTransformer = new VulnerabilityTransformer(notificationService,
                projectVersionService, policyService, bomVersionPolicyService,
                hubRequestService, metaService, logger);

        final VulnerabilityNotificationItem item = Mockito.mock(VulnerabilityNotificationItem.class);
        final VulnerabilityNotificationContent vulnerabilityNotificationContent = Mockito.mock(VulnerabilityNotificationContent.class);

        Mockito.when(vulnerabilityNotificationContent.getComponentName()).thenReturn("testComponent");
        Mockito.when(vulnerabilityNotificationContent.getComponentVersionLink()).thenReturn("http://my.hub.com/api/components/x/versions/y");
        final List<AffectedProjectVersion> affectedProjectVersions = new ArrayList<>();
        final AffectedProjectVersion affectedProjectVersion = Mockito.mock(AffectedProjectVersion.class);
        affectedProjectVersions.add(affectedProjectVersion);
        Mockito.when(affectedProjectVersion.getProjectName()).thenReturn("testProjectName");
        Mockito.when(affectedProjectVersion.getProjectVersionName()).thenReturn("testProjectVersionName");
        Mockito.when(affectedProjectVersion.getUrl()).thenReturn(PROJECT_VERSION_URL);
        Mockito.when(vulnerabilityNotificationContent.getAffectedProjectVersions()).thenReturn(affectedProjectVersions);

        final ComponentVersion componentVersion = Mockito.mock(ComponentVersion.class);
        Mockito.when(hubRequestService.getItem(Mockito.any(String.class), Mockito.eq(ComponentVersion.class))).thenReturn(componentVersion);

        Mockito.when(item.getContent()).thenReturn(vulnerabilityNotificationContent);
        final List<NotificationContentItem> items = vulnerabilityTransformer.transform(item);
        return items;
    }

}
